// Vertex shader:
// ================
#version 330 core
in vec3 vertex_position;
in vec3 vertex_normal;
in vec3 vertex_color;

out vec3 LightingColor; // resulting color from lighting calculations
out vec3 fragment_color;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

uniform mat4 MVP;

void main()
{
    gl_Position = MVP* vec4(vertex_position, 1.0);
    
    // gouraud shading
    // ------------------------
    vec3 Position = vertex_position;
	
    // ambient
    float ambientStrength = 0.2;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    vec3 lightDir = normalize(lightPos - Position);
    float diff = max(dot(vertex_normal, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.15; // this is set higher to better show the effect of Gouraud shading 
    vec3 viewDir = normalize(viewPos - Position);
    vec3 reflectDir = reflect(-lightDir, vertex_normal);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColor;      

    LightingColor = ambient + diffuse + specular;
	fragment_color = vertex_color;
	//fragment_color = lightColor;
}